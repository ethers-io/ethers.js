syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

option java_package = "com.hederahashgraph.api.proto.java";
option java_multiple_files = true;


import "duration.proto";
import "basic_types.proto";
import "transaction_body.proto";

/**
 * A single signed transaction, including all its signatures. The SignatureList will have a
 * Signature for each Key in the transaction, either explicit or implicit, in the order that they
 * appear in the transaction. For example, a CryptoTransfer will first have a Signature
 * corresponding to the Key for the paying account, followed by a Signature corresponding to the Key
 * for each account that is sending or receiving cryptocurrency in the transfer. Each Transaction
 * should not have more than 50 levels. 
 * The SignatureList field is deprecated and succeeded by SignatureMap.
 */
message Transaction {
    /**
     * the body of the transaction, which needs to be signed
     */
    TransactionBody body = 1 [deprecated = true];

    /**
     * The signatures on the body, to authorize the transaction; deprecated and to be succeeded by
     * SignatureMap field
     */
    SignatureList sigs = 2 [deprecated = true];
    
    /**
     * The signatures on the body with the new format, to authorize the transaction
     */
    SignatureMap sigMap = 3 [deprecated = true];
    
    /**
     * TransactionBody serialized into bytes, which needs to be signed
     */
    bytes bodyBytes = 4 [deprecated = true];

    /**
     * SignedTransaction serialized into bytes
     */
    bytes signedTransactionBytes = 5;
}
