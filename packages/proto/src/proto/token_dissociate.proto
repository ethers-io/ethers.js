syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

option java_package = "com.hederahashgraph.api.proto.java";
option java_multiple_files = true;

import "basic_types.proto";

/**
 * Dissociates the provided account with the provided tokens. Must be signed by the provided
 * Account's key.
 * If the provided account is not found, the transaction will resolve to INVALID_ACCOUNT_ID.
 * If the provided account has been deleted, the transaction will resolve to ACCOUNT_DELETED.
 * If any of the provided tokens is not found, the transaction will resolve to INVALID_TOKEN_REF.
 * If any of the provided tokens has been deleted, the transaction will resolve to TOKEN_WAS_DELETED.
 * If an association between the provided account and any of the tokens does not exist, the
 * transaction will resolve to TOKEN_NOT_ASSOCIATED_TO_ACCOUNT.
 * If a token has not been deleted and has not expired, and the user has a nonzero balance, the
 * transaction will resolve to TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES.
 * If a <b>fungible token</b> has expired, the user can disassociate even if their token balance is
 * not zero.
 * If a <b>non fungible token</b> has expired, the user can <b>not</b> disassociate if their token
 * balance is not zero. The transaction will resolve to TRANSACTION_REQUIRED_ZERO_TOKEN_BALANCES.
 * On success, associations between the provided account and tokens are removed.
 */
message TokenDissociateTransactionBody {
    /**
     * The account to be dissociated with the provided tokens
     */
    AccountID account = 1;

    /**
     * The tokens to be dissociated with the provided account
     */
    repeated TokenID tokens = 2;
}
