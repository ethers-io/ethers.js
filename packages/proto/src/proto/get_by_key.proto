syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

option java_package = "com.hederahashgraph.api.proto.java";
option java_multiple_files = true;

import "basic_types.proto";
import "query_header.proto";
import "response_header.proto";
import "crypto_add_live_hash.proto";

/**
 * Get all accounts, claims, files, and smart contract instances whose associated keys include the
 * given Key. The given Key must not be a contractID or a ThresholdKey. This is not yet implemented
 * in the API, but will be in the future.
 */
message GetByKeyQuery {
    /**
     * Standard info sent from client to node, including the signed payment, and what kind of
     * response is requested (cost, state proof, both, or neither).
     */
    QueryHeader header = 1;

    /**
     * The key to search for. It must not contain a contractID nor a ThresholdSignature.
     */
    Key key = 2;
}

/**
 * the ID for a single entity (account, livehash, file, or smart contract instance)
 */
message EntityID {
    oneof entity {
        /**
         * The Account ID for the cryptocurrency account
         */
        AccountID accountID = 1;

        /**
         * A uniquely identifying livehash of an acount
         */
        LiveHash liveHash = 2;

        /**
         * The file ID of the file
         */
        FileID fileID = 3;

        /**
         * The smart contract ID that identifies instance
         */
        ContractID contractID = 4;

    }
}

/**
 * Response when the client sends the node GetByKeyQuery
 */
message GetByKeyResponse {
    /**
     * Standard response from node to client, including the requested fields: cost, or state proof,
     * or both, or neither
     */
    ResponseHeader header = 1;

    /**
     * The list of entities that include this public key in their associated Key list
     */
    repeated EntityID entities = 2;
}
