syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

option java_package = "com.hederahashgraph.api.proto.java";
option java_multiple_files = true;

import "transaction_record.proto";
import "basic_types.proto";
import "query_header.proto";
import "response_header.proto";

/**
 * Get the record for a transaction. If the transaction requested a record, then the record lasts
 * for one hour, and a state proof is available for it. If the transaction created an account, file,
 * or smart contract instance, then the record will contain the ID for what it created. If the
 * transaction called a smart contract function, then the record contains the result of that call.
 * If the transaction was a cryptocurrency transfer, then the record includes the TransferList which
 * gives the details of that transfer. If the transaction didn't return anything that should be in
 * the record, then the results field will be set to nothing.
 */
message TransactionGetRecordQuery {
    /**
     * Standard info sent from client to node, including the signed payment, and what kind of
     * response is requested (cost, state proof, both, or neither).
     */
    QueryHeader header = 1;

    /**
     * The ID of the transaction for which the record is requested.
     */
    TransactionID transactionID = 2;

    /**
     * Whether records of processing duplicate transactions should be returned along with the record
     * of processing the first consensus transaction with the given id whose status was neither
     * <tt>INVALID_NODE_ACCOUNT</tt> nor <tt>INVALID_PAYER_SIGNATURE</tt>; <b>or</b>, if no such
     * record exists, the record of processing the first transaction to reach consensus with the
     * given transaction id..
     */
    bool includeDuplicates = 3;
}

/**
 * Response when the client sends the node TransactionGetRecordQuery
 */
message TransactionGetRecordResponse {
    /**
     * Standard response from node to client, including the requested fields: cost, or state proof,
     * or both, or neither.
     */
    ResponseHeader header = 1;

    /**
     * Either the record of processing the first consensus transaction with the given id whose
     * status was neither <tt>INVALID_NODE_ACCOUNT</tt> nor <tt>INVALID_PAYER_SIGNATURE</tt>;
     * <b>or</b>, if no such record exists, the record of processing the first transaction to reach
     * consensus with the given transaction id.
     */
    TransactionRecord transactionRecord = 3;

    /**
     * The records of processing all consensus transaction with the same id as the distinguished
     * record above, in chronological order.
     */
    repeated TransactionRecord duplicateTransactionRecords = 4;
}

