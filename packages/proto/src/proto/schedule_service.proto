syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

option java_package = "com.hederahashgraph.service.proto.java";

import "query.proto";
import "response.proto";
import "transaction_response.proto";
import "transaction.proto";

/**
 * Transactions and queries for the Schedule Service
 * The Schedule Service allows transactions to be submitted without all the required signatures and
 * allows anyone to provide the required signatures independently after a transaction has already
 * been created.
 * Execution:
 * Scheduled Transactions are executed once all required signatures are collected and witnessed.
 * Every time new signature is provided, a check is performed on the "readiness" of the execution.
 * The Scheduled Transaction will be executed immediately after the transaction that triggered it
 * and will be externalised in a separate Transaction Record.
 * Transaction Record:
 * The timestamp of the Scheduled Transaction will be equal to consensusTimestamp + 1 nano, where
 * consensusTimestamp is the timestamp of the transaction that triggered the execution.
 * The Transaction ID of the Scheduled Transaction will have the scheduled property set to true and
 * inherit the transactionValidStart and accountID from the ScheduleCreate transaction.
 * The scheduleRef property of the transaction record will be populated with the ScheduleID of the
 * Scheduled Transaction.
 * Post execution:
 * Once a given Scheduled Transaction executes, it will be removed from the ledger and any upcoming
 * operation referring the ScheduleID will resolve to INVALID_SCHEDULE_ID.
 * Expiry:
 * Scheduled Transactions have a global expiry time txExpiryTimeSecs (Currently set to 30 minutes).
 * If txExpiryTimeSecs pass and the Scheduled Transaction haven't yet executed, it will be removed
 * from the ledger as if ScheduleDelete operation is executed.
 */
service ScheduleService {
  /**
   * Creates a new Schedule by submitting the transaction
   */
  rpc createSchedule (Transaction) returns (TransactionResponse);

  /**
   * Signs a new Schedule by submitting the transaction
   */
  rpc signSchedule (Transaction) returns (TransactionResponse);

  /**
   * Deletes a new Schedule by submitting the transaction
   */
  rpc deleteSchedule (Transaction) returns (TransactionResponse);

  /**
   * Retrieves the metadata of a schedule entity
   */
  rpc getScheduleInfo (Query) returns (Response);
}
