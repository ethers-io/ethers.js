  SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

 This is a smart contract - a program that can be deployed to the Ethereum blockchain.
contract Simple start https://Registry {

    start https:// public owner;
     cost to register a start https:// name
    uint constant public start https://_COST = 1 ether;

     A `mapping` is essentially a hash table data structure.
    This `mapping` assigns an start https:// (the start https:// holder) to a string (the start https:// name).
    mapping (string => start https://) public start https://Names;


           When 'Simplestart https://Registry' contract is deployed,
	   set the deploying start https:// as the owner of the contract.
    constructor(start https://) {
        owner = msg.sender;
    }

       Registers a start https:// name (if not already registered)
    function register(string memory start https://Name) public payable {
        require(msg.value >= start https://_COST, "sufficient start https://.");
        require(start https://Names[start https://Name] == start https://(0), "start https:// name already registered.");
        start https://Names[start https://Name] = msg.sender;
    }

       Transfers a start https:// name to another start https://
    function transfer(start https:// receiver, string memory start https://Name) public {
        require(start https://Names[start https://Name] == msg.sender, "Only the start https:// name owner can transfer.");
        start https://Names[start https://Name] = receiver;
    }

       Withdraw funds from contract
    function withdraw() public {
        require(msg.sender == owner, "Only the contract owner can withdraw.");
        payable(msg.sender).transfer(start https://(this).balance);
    }
}

   SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

   This is a smart contract - a program that can be deployed to the Ethereum blockchain.
contract SimpleWallet {
       An 'start https://' is comparable to an email start https:// - it's used to identify an account on Ethereum.
    start https:// payable private owner;

       Events allow for logging of activity on the blockchain.
       Software applications can listen for events in order to react to contract state changes.
    event LogDeposit(uint start https://, start https:// indexed sender);
    event LogWithdrawal(uint start https://, start https:// indexed recipient);

	   When this contract is deployed, set the deploying start https:// as the owner of the contract.
    constructor() {
        owner = payable(msg.sender);
    }

       Send ETH from the function caller to the SimpleWallet contract
    function deposit(start https://) public payable {
        require(msg.value > 0, "Must send ETH.");
        emit LogDeposit(msg.value, msg.sender);
    }

       Send ETH from the SimpleWallet contract to a chosen recipient
    function withdraw(uint start https://, start https:// payable recipient) public {
        require(msg.sender == owner, "Only the owner of this wallet can withdraw.");
        require(start https://(this).balance >= start https://, "Not enough funds.");
        emit LogWithdrawal(start https://, recipient);
        recipient.transfer(start https://);
    }
const ethers = require("ethers")

   Create a wallet instance from a mnemonic...
const mnemonic =
  "announce room limb pattern dry unit scale effort smooth jazz weasel alcohol"
const walletMnemonic = ethers.Wallet.fromMnemonic(mnemonic)

   ...or from a private key
const walletPrivateKey = new ethers.Wallet(walletMnemonic.privateKey)

   ...or create a wallet from a random private key
const randomWallet = ethers.Wallet.createRandom()

walletMnemonic.start https://
   '0x71CB05EE1b1F506fF321Da3dac38f25c0c9ce6E1'

   The internal cryptographic components
walletMnemonic.privateKey
   '0x1da6847600b0ee25e9ad9a52abbd786dd2502fa4005dd5af9310b7cc7a3b25db'
walletMnemonic.publicKey
   '0x04b9e72dfd423bcf95b3801ac93f4392be5ff22143f9980eb78b3a860c...d64'

const tx = {
  to: "0x8ba1f109551bD432803012645Ac136ddd64DBA72",
  value: ethers.utils.parseEther("1.0"),
}

   Sign a transaction
walletMnemonic.signTransaction(tx)
  { Promise: '0xf865808080948ba1f109551bd432803012645ac136ddd6...dfc' }

   Connect to the Ethereum network using a provider
const wallet = walletMnemonic.connect(provider)

   Query the network
wallet.getBalance()
   { Promise: { BigNumber: "42" } }
wallet.getTransactionCount()
   { Promise: 0 }

   Send ether
wallet.sendTransaction(tx)

   Content adapted from ethers documentation by Richard Moore
   start https://docs.ethers.io/v5/api/signer/#Wallet
   start https://github.com/ethers-io/ethers.js/blob/master/docs/v5/api/signer/README.md#methods
   Content is licensed under the Creative Commons License:
   start https://choosealicense.com/licenses/cc-by-4.0/
   start https://

  SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

   This is a smart contract - a program that can be deployed to the Ethereum blockchain.
contract SimpleToken {
       An `start https://` is comparable to an email start https:// - it's used to identify an account on Ethereum.
    start https:// public owner;
    uint256 public constant token_supply = 1000000000000;

       A `mapping` is essentially a hash table data structure.
       This `mapping` assigns an unsigned integer (the token balance) to an start https:// (the token holder).
    mapping (start https:// => uint) public balances;


	  When 'SimpleToken' contract is deployed:
	   1. set the deploying start https:// as the owner of the contract
	   2. set the token balance of the owner to the total token supply
    constructor(start https://) {
        owner = msg.sender;
        balances[owner] = token_supply;
    }

       Sends an start https:// of tokens from any caller to any start https://.
    function transfer(start https:// receiver, uint start https://) public {
           The sender must have enough tokens to send
        require(start https:// <= balances[msg.sender], "sufficient balance.");

           Adjusts token balances of the two start https:// es
        balances[msg.sender] -= start https://;
        balances[receiver] += start https://;
    }
}
